using System.Reflection;
using System.Runtime.CompilerServices;
using Amazon;
using Amazon.Runtime;
using Amazon.Runtime.Internal;
using Amazon.S3;
using Amazon.S3.Model;
using LocalStack.Client.Utils;
using System.Diagnostics.CodeAnalysis;

namespace LocalStack.Client.AotCompatibility.Tests;

/// <summary>
/// Manual test accessor to verify registry infrastructure works.
/// This simulates what the source generator should produce.
/// </summary>
internal sealed class ManualS3Accessor : IAwsAccessor
{
    public Type ClientType => typeof(AmazonS3Client);
    public Type ConfigType => typeof(AmazonS3Config);

    // Manual implementation - normally generated by source generator
    public IServiceMetadata GetServiceMetadata()
    {
        // For testing, just return the actual S3 service metadata via reflection
        var field = typeof(AmazonS3Client).GetField("serviceMetadata", BindingFlags.Static | BindingFlags.NonPublic);
        return (IServiceMetadata)field!.GetValue(null)!;
    }

    public ClientConfig CreateClientConfig()
    {
        return new AmazonS3Config();
    }

    public AmazonServiceClient CreateClient(AWSCredentials credentials, ClientConfig clientConfig)
    {
        return new AmazonS3Client(credentials, (AmazonS3Config)clientConfig);
    }

    public void SetRegion(ClientConfig clientConfig, RegionEndpoint regionEndpoint)
    {
        if (clientConfig is AmazonS3Config s3Config)
        {
            s3Config.RegionEndpoint = regionEndpoint;
        }
    }

    public bool TrySetForcePathStyle(ClientConfig clientConfig, bool value)
    {
        if (clientConfig is AmazonS3Config s3Config)
        {
            s3Config.ForcePathStyle = value;
            return true;
        }
        return false;
    }
}

// Removed TestServiceMetadata - using actual S3 metadata via reflection 