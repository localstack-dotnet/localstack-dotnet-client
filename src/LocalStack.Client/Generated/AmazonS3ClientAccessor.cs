#if NET8_0_OR_GREATER
using System.Runtime.CompilerServices;
using Amazon.S3;

namespace LocalStack.Client.Generated;

/// <summary>
/// Generated accessor for Amazon S3 Client using UnsafeAccessor pattern.
/// This is a proof-of-concept implementation that would be generated by the Source Generator.
/// </summary>
[System.Diagnostics.CodeAnalysis.DynamicDependency("serviceMetadata", typeof(AmazonS3Client))]
internal sealed class AmazonS3ClientAccessor : IAwsAccessor
{
    [UnsafeAccessor(UnsafeAccessorKind.StaticField, Name = "serviceMetadata")]
    private static extern ref IServiceMetadata GetServiceMetadataField(AmazonS3Client? instance);

    [UnsafeAccessor(UnsafeAccessorKind.Constructor)]
    private static extern AmazonS3Config CreateS3Config();

    // Note: We may need to access private fields in AmazonS3Config for region setting
    // This depends on AWS SDK internal structure - will be discovered by the generator
    public IServiceMetadata GetServiceMetadata()
    {
        return GetServiceMetadataField(null);
    }

    public ClientConfig CreateClientConfig()
    {
        return CreateS3Config();
    }

    public void SetRegion(ClientConfig clientConfig, RegionEndpoint regionEndpoint)
    {
        if (clientConfig is AmazonS3Config s3Config)
        {
            // Use public API if available, otherwise UnsafeAccessor would be generated
            s3Config.RegionEndpoint = regionEndpoint;
        }
        else
        {
            throw new ArgumentException($"Expected AmazonS3Config, got {clientConfig.GetType().Name}", nameof(clientConfig));
        }
    }

    public bool TrySetForcePathStyle(ClientConfig clientConfig, bool value)
    {
        if (clientConfig is AmazonS3Config s3Config)
        {
            s3Config.ForcePathStyle = value;
            return true;
        }
        
        return false;
    }
}

/// <summary>
/// Module initializer to register the S3 accessor.
/// This would be generated automatically by the Source Generator.
/// </summary>
internal static class S3AccessorInitializer
{
    [ModuleInitializer]
    internal static void RegisterS3Accessor()
    {
        AwsAccessorRegistry.Register<AmazonS3Client>(new AmazonS3ClientAccessor());
    }
}
#endif
